version: '2.4'

services:
  app:
    image: ghcr.io/datamade/bga-payroll:latest
    container_name: bga-payroll
    # Allow container to be attached to, e.g., to access the pdb shell
    stdin_open: true
    tty: true
    ports:
      # Map ports on your computer to ports on your container. This allows you,
      # e.g., to visit your containerized application in a browser on your
      # computer.
      - 8000:8000
    depends_on:
      worker:
        condition: service_started
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    volumes:
      # Mount the development directory as a volume into the container, so
      # Docker automatically recognizes your changes.
      - .:/app
      - ${PWD}/bga_database/local_settings.py.example:/app/bga_database/local_settings.py
    environment:
      DJANGO_MANAGEPY_MIGRATE: "on"
    entrypoint: /app/docker-entrypoint.sh
    command: python manage.py runserver 0.0.0.0:8000

  worker:
    container_name: bga-payroll-worker
    image: ghcr.io/datamade/bga-payroll:latest
    stdin_open: true
    tty: true
    volumes:
      # These should generally be the same as your application volumes.
      - .:/app
      - ${PWD}/bga_database/local_settings.py.example:/app/bga_database/local_settings.py
    command: celery --app=bga_database.celery:app worker --loglevel=DEBUG

  postgres:
    container_name: bga-payroll-postgres
    image: postgres:14
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    environment:
      # The default Postgres image exposes a number of environmental variables
      # that allow you to configure the container's behavior, without writing
      # any additional code. Specify the name of your database, and any other
      # variables, here. https://hub.docker.com/_/postgres/#environment-variables
      - POSTGRES_DB=bga_payroll
      - POSTGRES_PASSWORD=password
    volumes:
      # By default, Postgres instantiates an anonymous volume. Use a named
      # one, so your data persists beyond the life of the container. See this
      # post for a discussion of the pitfalls of Postgres and anonymous
      # volumes: https://linuxhint.com/run_postgresql_docker_compose/
      - bga-payroll-db-data:/var/lib/postgresql/data
    ports:
      - 32001:5432

  redis:
    image: redis
    container_name: bga-payroll-redis
    ports:
      - '127.0.0.1:6380:6379'
    volumes:
      - ./configs/redis.conf:/redis.conf
    command: redis-server /redis.conf

volumes:
  bga-payroll-db-data:
